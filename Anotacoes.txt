Criando usuário para autenticação com password criptografado.

Faremos a instalação da gem bcrypt que está comentada no gemfile, com isso podemos adicionar no app/models/user.rb a expressão has_secure_password
assim faremos a inserção do user como no modelo a seguir.

  rails generate model User email:string password_digest:string
-> No irb podemos fazer as verificações dos dados no BD usando a instância User.all etc.



Vamos fazer a inserção do User 
  User.create({email:'vandecopinto@gmail.com',password:'password', password_confirmation:'password'})

  Por conta do bcrypt ele faz a inserção do usuário com o password criptografado:
        #<User:0x00007f679778a090
        id: 1,
        email: "vandecopinto@gmail.com",
        password_digest: "[FILTERED]",
        created_at: Sun, 05 Nov 2023 12:09:13.180389000 UTC +00:00,
        updated_at: Sun, 05 Nov 2023 12:09:13.180389000 UTC +00:00>

--------------------------------------------------------------------------------------------------------------------------------------------------

Validando o campo email

Adicionaremos em app/models/user.rb a linha 
  validates :email, presence: true
Isso vai assegurar que os dados serão validados na gravação antes de entrar no banco de dados.

Outra maneira de fazer isso é ir no arquivo db/migrate e adicionar a informação  null: false
  class CreateUsers < ActiveRecord::Migration[7.0]
  def change
    create_table :users do |t|
      t.string :email , null: false
      t.string :password_digest
      t.timestamps
    end
  end
end
Assim não será permitida a inserção dos dados com o campo email sem dados.
OBS: Para esse ultimo funcionar devemos fazer os comandos de rollback e migrar os dados novamente para ele atualizar a tabela.
  rails db:rollback
  rails db:migrate
Esses dois comandos podem ser substituídos por 
  rails db:redo

Também podemos fazer uma validação regex para o email adicionando em app/models/user.rb:

  validates :email, presence: true, format: { with: /\A[^@\s]+@[^@\s]+\z/, message: "must be a valid email address" }

--------------------------------------------------------------------------------------------------------------------------------------------------

Adicionando um usuário no sistema

OBS: Atenção aos nomes de arquivos e funções. O Ruby segue rotas e classes com os mesmos nomes.

Primeiro vamos criar a rota para a página de inserção de usuário em config/routes.rb

get "sign_up" , to: "registrations#new"

Criaremos o arquivo de controller app/controllers/registrations_controller com uma classe contendo a função new citada no routes
dentro desse método vamos criar uma variável de instância (que pode ser acessada em views) @user.

Vamos criar um arquivo chamado views/registrations/new.html.erb, lá teremos acesso à variável @user.

Criaremos aqui o form para preencher os dados do usuário. Esse form é preenchido de uma maneira peculiar
mas antes temos que adicionar um url helper nas rotas chamada users
Em config/routes.rb adicionaremos um post request:

  post "sign_up", to: "registrations#create"

somente então criaremos o forms em views/registrations/new.html.erb:

<%= form_with model: @user, url: sign_up_path do |form| %>
      <%= form.text_field :email %>
      <%= form.password_field :password %>
      <%= form.password_field :password_confirmation %>
      <%= form.submit %>
<%end%>
Se inspecionarmos o form acima no browser veremos que ele tem a action="sign_up" do method="post"
Faremos uma formatação com bootstrap e inserção do botão submit.

Ao preenchermos o formulário e submeter teremos erro pois não criamos o método create em registrations_controller.
Criaremos então:

    class RegistrationsController < ApplicationController
      
      def new
        @user = User.new
      end


      def create
        # params = {"email"=>"mauroinfraero@yahoo.com.br", "password_confirmation"=>"[FILTERED]", "password"=>"[FILTERED]"}, "commit"=>"Create User"}
        
        @user = User.new(user_params)
        
        if @user.save if # saves to database correctly
          redirect_to root_path, notice: "Successfully created account."
        else      
          render :new
          # views/registrations/new.html.erb
        end

      end

      private 

      def user_params
        params.require(:user).permit(:email,:password,:password_confirmation)
        # means:  these are the only things we allow you to set
      end
    end

Vamos atualizar o formulário para mostrar caso alg dêerrad


