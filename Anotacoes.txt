Criando usuário para autenticação com password criptografado.

Faremos a instalação da gem bcrypt que está comentada no gemfile, com isso podemos adicionar no app/models/user.rb a expressão has_secure_password
assim faremos a inserção do user como no modelo a seguir.

  rails generate model User email:string password_digest:string
-> No irb podemos fazer as verificações dos dados no BD usando a instância User.all etc.



Vamos fazer a inserção do User 
  User.create({email:'vandecopinto@gmail.com',password:'password', password_confirmation:'password'})

  Por conta do bcrypt ele faz a inserção do usuário com o password criptografado:
        #<User:0x00007f679778a090
        id: 1,
        email: "vandecopinto@gmail.com",
        password_digest: "[FILTERED]",
        created_at: Sun, 05 Nov 2023 12:09:13.180389000 UTC +00:00,
        updated_at: Sun, 05 Nov 2023 12:09:13.180389000 UTC +00:00>

--------------------------------------------------------------------------------------------------------------------------------------------------

Validando o campo email

Adicionaremos em app/models/user.rb a linha 
  validates :email, presence: true
Isso vai assegurar que os dados serão validados na gravação antes de entrar no banco de dados.

Outra maneira de fazer isso é ir no arquivo db/migrate e adicionar a informação  null: false
  class CreateUsers < ActiveRecord::Migration[7.0]
  def change
    create_table :users do |t|
      t.string :email , null: false
      t.string :password_digest
      t.timestamps
    end
  end
end
Assim não será permitida a inserção dos dados com o campo email sem dados.
OBS: Para esse ultimo funcionar devemos fazer os comandos de rollback e migrar os dados novamente para ele atualizar a tabela.
  rails db:rollback
  rails db:migrate
Esses dois comandos podem ser substituídos por 
  rails db:redo

Também podemos fazer uma validação regex para o email adicionando em app/models/user.rb:

  validates :email, presence: true, format: { with: /\A[^@\s]+@[^@\s]+\z/, message: "must be a valid email address" }

--------------------------------------------------------------------------------------------------------------------------------------------------

Adicionando um usuário no sistema

OBS: Atenção aos nomes de arquivos e funções. O Ruby segue rotas e classes com os mesmos nomes.

Primeiro vamos criar a rota para a página de inserção de usuário em config/routes.rb

get "sign_up" , to: "registrations#new"

Criaremos o arquivo de controller app/controllers/registrations_controller com uma classe contendo a função new citada no routes
dentro desse método vamos criar uma variável de instância (que pode ser acessada em views) @user.

Vamos criar um arquivo chamado views/registrations/new.html.erb, lá teremos acesso à variável @user.

Criaremos aqui o form para preencher os dados do usuário. Esse form é preenchido de uma maneira peculiar
mas antes temos que adicionar um url helper nas rotas chamada users
Em config/routes.rb adicionaremos um post request:

  post "sign_up", to: "registrations#create"

somente então criaremos o forms em views/registrations/new.html.erb:

<%= form_with model: @user, url: sign_up_path do |form| %>
      <%= form.text_field :email %>
      <%= form.password_field :password %>
      <%= form.password_field :password_confirmation %>
      <%= form.submit %>
<%end%>
Se inspecionarmos o form acima no browser veremos que ele tem a action="sign_up" do method="post"
Faremos uma formatação com bootstrap e inserção do botão submit.

Ao preenchermos o formulário e submeter teremos erro pois não criamos o método create em registrations_controller.
Criaremos então:

    class RegistrationsController < ApplicationController
      
      def new
        @user = User.new
      end


      def create
        # params = {"email"=>"mauroinfraero@yahoo.com.br", "password_confirmation"=>"[FILTERED]", "password"=>"[FILTERED]"}, "commit"=>"Create User"}
        
        @user = User.new(user_params)
        
        if @user.save if # saves to database correctly
          redirect_to root_path, notice: "Successfully created account."
        else      
          render :new
          # views/registrations/new.html.erb
        end

      end

      private 

      def user_params
        params.require(:user).permit(:email,:password,:password_confirmation)
        # means:  these are the only things we allow you to set
      end
    end

Vamos atualizar o formulário para mostrar caso alg dê errado.
OBS: Há uma atualização no rails que inclui a biblioteca (Turbo Drive) que estava causando erro, eu adicionei data: { turbo: false} ao form para corrigir.
Também podemos retirar a biblioteca no gemfile.
-------------------
The reason why you are not getting the error messages rendered is because now Turbo Drive is a default part of Rails 7.
What is Turbo Drive?
In simple terms, it's a tool that handles the link clicks and form submissions for you, sending requests to the server and updating just a portion of the page, not reloading the full page as we are accustomed. This is known as AJAX.
So, what is the problem?
Usually we redirect the browser to a different place if the submission succeeded (a 3XX code), but Turbo doesn't know how to handle error responses (4XX and 5XX codes), that's our case when the user submits invalid data (code 422) so nothing is updated and no error messages are shown.
How to solve it?
Just disable Turbo on your form  with `data: { turbo: false}`. If you are using Rails 5 or any previous version you also have to make the form local with `local: true`, that will disable AJAX as well (not needed for Rails 6 or 7).

Here my references:
https://www.theodinproject.com/lessons/ruby-on-rails-turbo-drive
https://issuecloser.com/blog/form-with-option-change-from-local-false-to-local-true
-------------------

--------------------------------------------------------------------------------------------------------------------------------------------------
https://www.youtube.com/watch?v=IzbQAj_tcfI&list=PLm8ctt9NhMNV75T9WYIrA6m9I_uw7vS56&index=15&ab_channel=GoRails
Criando o sign_in
Usaremos o cookie para manter o usuário logado.
Podemos criar um cookie em registrations_controller#create (cookies(:user_id)) mas isso seria fácil de manipular no browser para invasões.
O Rails provê ferramentas com cookies que iremos usar. Em registrations_controller#create se criar o usuário ele vai iniciar a sessão com o id do usuário.
  if @user.save
    session[:user_id] = @user.id
    ...

vamos verificar a sessão em main_controller.rb
  if session[:user_id]
    @user = User.find(session[:user_id]) **ver OBS
  end
OBS: Caso a gente apague, via irb, o usário da sessão, ao atualizar a página e o find não achar o user, teremos um erro no sistema. Para corrigir isso vamos buscar o usuário
com o find_by, porque caso ele não encontre não será gerado um erro e o sistema continuará funcionando sem sessão ativa.

  @user = User.find_by(id: session[:user_id])

No main controller já teremos os dados da sessão.

  <%if @user%>
    Logged in as <%=  @user.email%>
  <%end%>


--------------------------------------------------------------------------------------------------------------------------------------------------
https://www.youtube.com/watch?v=fCunJskZkYI&list=PLm8ctt9NhMNV75T9WYIrA6m9I_uw7vS56&index=16&ab_channel=GoRails
Logging Out

Criaremos uma rota para controller_session#destroy do tipo delete, 
  delete "logout" to: "sessions#destroy"
Criaremos um controller para sessions com o método destroy que vai apagar a sessão.
  class SessionsController < ApplicationController
  def destroy
    session[:user_id] = nil
    redirect_to root_path, notice: "Logged out"
  end
end

IMPORTANTE: criaremos um BOTÃO na página pricipal para fazer o LOGOUT, já que por padrão com o o link possui o método get. Dessa forma ele vai criar um form (hidden) para esse botão para usar o method delete.

  <%= button_to "Logout", logout_path, method: :delete %>

--------------------------------------------------------------------------------------------------------------------------------------------------
https://www.youtube.com/watch?v=UC5LjuFDQM4&list=PLm8ctt9NhMNV75T9WYIrA6m9I_uw7vS56&index=17&ab_channel=GoRails
Login Form

Primeiramente criaremos as rotas de new e create direcionando para SessionsController

  get "sign_in",  to: "sessions#new"
  post "sign_in", to: "sessions#create"

em app/SessionsController já temos o método destroy, adicionaremos o new e o create.
Como o destroy não precisa de uma view, criaremos a view para os demais em views/sessions/new.html.erb com o form para a inserção dos dados do usuário.
    <h1>Sign In</h1>
    <%= form_with url: sign_in_path do |form| %>
        ...
    <%end%>

No SessionsController#create faremos a consulta do email e password para autenticação do usuário.

      def create
            user = User.find_by(email: params[:email])

            if user.present? && user.authenticate(params[:password])
              render plain: "Achou!"
            end            
        end
OBS: O fato do model User ter o comando has_secure_password nos dá a possibilidade de usarmos a confirmação de senha e a validação (user.authenticate()). Fiz o atenticate com password_confirmation ao invés de password para funcionar, não sei o motivo
também usei o comando render :new, status:  :unprocessable_entity para o caso do não reconhecimento do password ou email. Também não sei o motivo, mas tem haver com o turbo.

--------------------------------------------------------------------------------------------------------------------------------------------------

https://www.youtube.com/watch?v=hlpKyOb5yLc&list=PLm8ctt9NhMNV75T9WYIrA6m9I_uw7vS56&index=18&ab_channel=GoRails
Accessing the Current User

Vamos remover a função do main_controller para o ApplicationController para ele rodar em toda a aplicação.
      def set_current_user
        if session[:user_id]
          Current.user = User.find_by(id: session[:user_id])
        end
      end

Então criamos um model chamado current.rb que terá uma classe que herdará de ActiveSupport::CurrentAttributes attribute :user
Assim quando o usuário logar os dados dele estarão aí.
A primeira coisa que tem nesse arquivo é o before_action :set_current_user. Que vai verificar se o usuário tem sessão e vai manter o usuário logado. 
Agora em nossos views podemos ter a informação que o usuário está logado por meio do Current.user. Vamos usar isso no navbar na parte direita.

Então no navbar teremos o <% if Current.user %> para colocar links de logado ou não.

Agora vamos acrescentar uma rota para editar password e também um patch para update
  get "password", to: "password#edit"
  patch "password", to: "password#update"

A rota de password é para o usuário já logado.
Criaremos um controller para password com o before_action: require_user_logged_in!, mas esse método será escrito na classe pai (ApplicationController)

